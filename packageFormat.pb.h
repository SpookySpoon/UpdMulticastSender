// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packageFormat.proto

#ifndef PROTOBUF_packageFormat_2eproto__INCLUDED
#define PROTOBUF_packageFormat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace udpStream {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_packageFormat_2eproto();
void protobuf_AssignDesc_packageFormat_2eproto();
void protobuf_ShutdownFile_packageFormat_2eproto();

class updBytes;

// ===================================================================

class updBytes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:udpStream.updBytes) */ {
 public:
  updBytes();
  virtual ~updBytes();

  updBytes(const updBytes& from);

  inline updBytes& operator=(const updBytes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const updBytes& default_instance();

  void Swap(updBytes* other);

  // implements Message ----------------------------------------------

  inline updBytes* New() const { return New(NULL); }

  updBytes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const updBytes& from);
  void MergeFrom(const updBytes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(updBytes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 packId = 1;
  void clear_packid();
  static const int kPackIdFieldNumber = 1;
  ::google::protobuf::uint32 packid() const;
  void set_packid(::google::protobuf::uint32 value);

  // optional bytes pack = 2;
  void clear_pack();
  static const int kPackFieldNumber = 2;
  const ::std::string& pack() const;
  void set_pack(const ::std::string& value);
  void set_pack(const char* value);
  void set_pack(const void* value, size_t size);
  ::std::string* mutable_pack();
  ::std::string* release_pack();
  void set_allocated_pack(::std::string* pack);

  // @@protoc_insertion_point(class_scope:udpStream.updBytes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr pack_;
  ::google::protobuf::uint32 packid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_packageFormat_2eproto();
  friend void protobuf_AssignDesc_packageFormat_2eproto();
  friend void protobuf_ShutdownFile_packageFormat_2eproto();

  void InitAsDefaultInstance();
  static updBytes* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// updBytes

// optional uint32 packId = 1;
inline void updBytes::clear_packid() {
  packid_ = 0u;
}
inline ::google::protobuf::uint32 updBytes::packid() const {
  // @@protoc_insertion_point(field_get:udpStream.updBytes.packId)
  return packid_;
}
inline void updBytes::set_packid(::google::protobuf::uint32 value) {
  
  packid_ = value;
  // @@protoc_insertion_point(field_set:udpStream.updBytes.packId)
}

// optional bytes pack = 2;
inline void updBytes::clear_pack() {
  pack_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& updBytes::pack() const {
  // @@protoc_insertion_point(field_get:udpStream.updBytes.pack)
  return pack_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void updBytes::set_pack(const ::std::string& value) {
  
  pack_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:udpStream.updBytes.pack)
}
inline void updBytes::set_pack(const char* value) {
  
  pack_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:udpStream.updBytes.pack)
}
inline void updBytes::set_pack(const void* value, size_t size) {
  
  pack_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:udpStream.updBytes.pack)
}
inline ::std::string* updBytes::mutable_pack() {
  
  // @@protoc_insertion_point(field_mutable:udpStream.updBytes.pack)
  return pack_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* updBytes::release_pack() {
  // @@protoc_insertion_point(field_release:udpStream.updBytes.pack)
  
  return pack_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void updBytes::set_allocated_pack(::std::string* pack) {
  if (pack != NULL) {
    
  } else {
    
  }
  pack_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pack);
  // @@protoc_insertion_point(field_set_allocated:udpStream.updBytes.pack)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace udpStream

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_packageFormat_2eproto__INCLUDED
