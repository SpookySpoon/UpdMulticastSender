// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packageFormat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packageFormat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace UdpStream {

namespace {

const ::google::protobuf::Descriptor* UdpBytes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UdpBytes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UdpBytes_PackStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_packageFormat_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_packageFormat_2eproto() {
  protobuf_AddDesc_packageFormat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packageFormat.proto");
  GOOGLE_CHECK(file != NULL);
  UdpBytes_descriptor_ = file->message_type(0);
  static const int UdpBytes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpBytes, packid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpBytes, packcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpBytes, packstatus_),
  };
  UdpBytes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UdpBytes_descriptor_,
      UdpBytes::default_instance_,
      UdpBytes_offsets_,
      -1,
      -1,
      -1,
      sizeof(UdpBytes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpBytes, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpBytes, _is_default_instance_));
  UdpBytes_PackStatus_descriptor_ = UdpBytes_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packageFormat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UdpBytes_descriptor_, &UdpBytes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packageFormat_2eproto() {
  delete UdpBytes::default_instance_;
  delete UdpBytes_reflection_;
}

void protobuf_AddDesc_packageFormat_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_packageFormat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023packageFormat.proto\022\tUdpStream\"\222\001\n\010Udp"
    "Bytes\022\016\n\006packId\030\001 \001(\r\022\023\n\013packContent\030\002 \001"
    "(\014\0222\n\npackStatus\030\003 \001(\0162\036.UdpStream.UdpBy"
    "tes.PackStatus\"-\n\nPackStatus\022\t\n\005FIRST\020\000\022"
    "\n\n\006MIDDLE\020\001\022\010\n\004LAST\020\002b\006proto3", 189);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packageFormat.proto", &protobuf_RegisterTypes);
  UdpBytes::default_instance_ = new UdpBytes();
  UdpBytes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packageFormat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packageFormat_2eproto {
  StaticDescriptorInitializer_packageFormat_2eproto() {
    protobuf_AddDesc_packageFormat_2eproto();
  }
} static_descriptor_initializer_packageFormat_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* UdpBytes_PackStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdpBytes_PackStatus_descriptor_;
}
bool UdpBytes_PackStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UdpBytes_PackStatus UdpBytes::FIRST;
const UdpBytes_PackStatus UdpBytes::MIDDLE;
const UdpBytes_PackStatus UdpBytes::LAST;
const UdpBytes_PackStatus UdpBytes::PackStatus_MIN;
const UdpBytes_PackStatus UdpBytes::PackStatus_MAX;
const int UdpBytes::PackStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UdpBytes::kPackIdFieldNumber;
const int UdpBytes::kPackContentFieldNumber;
const int UdpBytes::kPackStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UdpBytes::UdpBytes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UdpStream.UdpBytes)
}

void UdpBytes::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UdpBytes::UdpBytes(const UdpBytes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UdpStream.UdpBytes)
}

void UdpBytes::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packid_ = 0u;
  packcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packstatus_ = 0;
}

UdpBytes::~UdpBytes() {
  // @@protoc_insertion_point(destructor:UdpStream.UdpBytes)
  SharedDtor();
}

void UdpBytes::SharedDtor() {
  packcontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UdpBytes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UdpBytes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdpBytes_descriptor_;
}

const UdpBytes& UdpBytes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packageFormat_2eproto();
  return *default_instance_;
}

UdpBytes* UdpBytes::default_instance_ = NULL;

UdpBytes* UdpBytes::New(::google::protobuf::Arena* arena) const {
  UdpBytes* n = new UdpBytes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UdpBytes::Clear() {
// @@protoc_insertion_point(message_clear_start:UdpStream.UdpBytes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UdpBytes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UdpBytes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(packid_, packstatus_);
  packcontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool UdpBytes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UdpStream.UdpBytes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 packId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_packContent;
        break;
      }

      // optional bytes packContent = 2;
      case 2: {
        if (tag == 18) {
         parse_packContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_packStatus;
        break;
      }

      // optional .UdpStream.UdpBytes.PackStatus packStatus = 3;
      case 3: {
        if (tag == 24) {
         parse_packStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_packstatus(static_cast< ::UdpStream::UdpBytes_PackStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UdpStream.UdpBytes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UdpStream.UdpBytes)
  return false;
#undef DO_
}

void UdpBytes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UdpStream.UdpBytes)
  // optional uint32 packId = 1;
  if (this->packid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packid(), output);
  }

  // optional bytes packContent = 2;
  if (this->packcontent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->packcontent(), output);
  }

  // optional .UdpStream.UdpBytes.PackStatus packStatus = 3;
  if (this->packstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->packstatus(), output);
  }

  // @@protoc_insertion_point(serialize_end:UdpStream.UdpBytes)
}

::google::protobuf::uint8* UdpBytes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UdpStream.UdpBytes)
  // optional uint32 packId = 1;
  if (this->packid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->packid(), target);
  }

  // optional bytes packContent = 2;
  if (this->packcontent().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->packcontent(), target);
  }

  // optional .UdpStream.UdpBytes.PackStatus packStatus = 3;
  if (this->packstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->packstatus(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:UdpStream.UdpBytes)
  return target;
}

int UdpBytes::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:UdpStream.UdpBytes)
  int total_size = 0;

  // optional uint32 packId = 1;
  if (this->packid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packid());
  }

  // optional bytes packContent = 2;
  if (this->packcontent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->packcontent());
  }

  // optional .UdpStream.UdpBytes.PackStatus packStatus = 3;
  if (this->packstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->packstatus());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdpBytes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UdpStream.UdpBytes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UdpBytes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UdpBytes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UdpStream.UdpBytes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UdpStream.UdpBytes)
    MergeFrom(*source);
  }
}

void UdpBytes::MergeFrom(const UdpBytes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UdpStream.UdpBytes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.packid() != 0) {
    set_packid(from.packid());
  }
  if (from.packcontent().size() > 0) {

    packcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packcontent_);
  }
  if (from.packstatus() != 0) {
    set_packstatus(from.packstatus());
  }
}

void UdpBytes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UdpStream.UdpBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdpBytes::CopyFrom(const UdpBytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UdpStream.UdpBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpBytes::IsInitialized() const {

  return true;
}

void UdpBytes::Swap(UdpBytes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UdpBytes::InternalSwap(UdpBytes* other) {
  std::swap(packid_, other->packid_);
  packcontent_.Swap(&other->packcontent_);
  std::swap(packstatus_, other->packstatus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UdpBytes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UdpBytes_descriptor_;
  metadata.reflection = UdpBytes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UdpBytes

// optional uint32 packId = 1;
void UdpBytes::clear_packid() {
  packid_ = 0u;
}
 ::google::protobuf::uint32 UdpBytes::packid() const {
  // @@protoc_insertion_point(field_get:UdpStream.UdpBytes.packId)
  return packid_;
}
 void UdpBytes::set_packid(::google::protobuf::uint32 value) {
  
  packid_ = value;
  // @@protoc_insertion_point(field_set:UdpStream.UdpBytes.packId)
}

// optional bytes packContent = 2;
void UdpBytes::clear_packcontent() {
  packcontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UdpBytes::packcontent() const {
  // @@protoc_insertion_point(field_get:UdpStream.UdpBytes.packContent)
  return packcontent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UdpBytes::set_packcontent(const ::std::string& value) {
  
  packcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UdpStream.UdpBytes.packContent)
}
 void UdpBytes::set_packcontent(const char* value) {
  
  packcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UdpStream.UdpBytes.packContent)
}
 void UdpBytes::set_packcontent(const void* value, size_t size) {
  
  packcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UdpStream.UdpBytes.packContent)
}
 ::std::string* UdpBytes::mutable_packcontent() {
  
  // @@protoc_insertion_point(field_mutable:UdpStream.UdpBytes.packContent)
  return packcontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UdpBytes::release_packcontent() {
  // @@protoc_insertion_point(field_release:UdpStream.UdpBytes.packContent)
  
  return packcontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UdpBytes::set_allocated_packcontent(::std::string* packcontent) {
  if (packcontent != NULL) {
    
  } else {
    
  }
  packcontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packcontent);
  // @@protoc_insertion_point(field_set_allocated:UdpStream.UdpBytes.packContent)
}

// optional .UdpStream.UdpBytes.PackStatus packStatus = 3;
void UdpBytes::clear_packstatus() {
  packstatus_ = 0;
}
 ::UdpStream::UdpBytes_PackStatus UdpBytes::packstatus() const {
  // @@protoc_insertion_point(field_get:UdpStream.UdpBytes.packStatus)
  return static_cast< ::UdpStream::UdpBytes_PackStatus >(packstatus_);
}
 void UdpBytes::set_packstatus(::UdpStream::UdpBytes_PackStatus value) {
  
  packstatus_ = value;
  // @@protoc_insertion_point(field_set:UdpStream.UdpBytes.packStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace UdpStream

// @@protoc_insertion_point(global_scope)
